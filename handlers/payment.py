from created_bot import dp, bot
from aiogram import types, Dispatcher
from aiogram.types.message import ContentType
from config import PAY_TOKEN_TEST
from data_baze import baze_bd


# –ø–µ—Ä–µ–¥–∞–µ—Ç —Å—á–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
async def start_of_payment(message: types.Message):
    if PAY_TOKEN_TEST.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, '–Ø –∑–∞–ø—É—â–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ')
    price = types.LabeledPrice(label='–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã',
                               amount=baze_bd.the_amount_of_payment_for_goods_for_cheque(message.from_user.id))
    await bot.send_invoice(message.chat.id, title='–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤', description='–ò—Ç–æ–≥–æ:', provider_token=PAY_TOKEN_TEST,
                           currency='rub', is_flexible=False, prices=[price], start_parameter='products-example',
                           payload=str(message.from_user.id), need_phone_number=True, need_name=True)


# —Ñ-—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –±–∞–Ω–∫–∞
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# —Ñ-—Ü–∏—è –ª–æ–≤—è—â–∞—è –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ
async def process_successful_payment(message: types.Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    if await baze_bd.user_exists_basket(message.successful_payment.invoice_payload) == True:
        await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!')
        a = message.successful_payment.order_info.phone_number
        b = message.successful_payment.provider_payment_charge_id
        c = message.successful_payment.order_info.name
        admins_id = baze_bd.select_in_admin()
        for id_admin in admins_id:
            for adminid in id_admin:
                if adminid == '5273991830':
                    continue
                else:
                    await bot.send_message(int(adminid),
                                           text=f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {b}\n–ö–ª–∏–µ–Ω—Ç {c} —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {a}\n –°–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞:')
                    for ret in baze_bd.user_basket_select_end(message.successful_payment.invoice_payload):
                        await bot.send_message(int(adminid),
                                               text=f'{ret[0]}\n–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: {ret[1]}\n–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {ret[2]}')
                    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –ª–∏ —Ñ-—Ü–∏—è, –∞ –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ø–æ–∫—É–ø–∫–∏ —é–∑–µ—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
                    if await baze_bd.the_rest_of_the_product_after_purchase(
                            message.successful_payment.invoice_payload) == True:
                        baze_bd.del_user_in_basket(message.successful_payment.invoice_payload)


def payment_handler(dp: Dispatcher):
    dp.register_message_handler(start_of_payment, (lambda message: message.text == '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí∞'))
    dp.register_pre_checkout_query_handler(process_pre_checkout_query, (lambda query: True))
    dp.register_message_handler(process_successful_payment, content_types=ContentType.SUCCESSFUL_PAYMENT)
