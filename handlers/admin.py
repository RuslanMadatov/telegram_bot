from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from created_bot import bot
from aiogram.dispatcher.filters import Text
from data_baze import baze_bd, redis_db
from keyboards import admin_keyboard, client_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

ID = None


class FSMAdmin(StatesGroup):
    photo = State()
    name = State()
    discription = State()
    price = State()
    total_quantity = State()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É
# @dp.message_handler(commands=['moderator'], is_chat_admin=True)
async def make_chat_commands(message: types.Message):
    global ID
    ID = message.from_user.id
    await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                           reply_markup=admin_keyboard.button_case_admin)
    chat_admins = await bot.get_chat_administrators(message.chat.id)
    adminId = []
    for admins in chat_admins:
        adminId.append(str(admins.user.id))
    await baze_bd.insert_in_admin(adminId)


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
# @dp.message_handler(commands='–ó–∞–≥—Ä—É–∑–∏—Ç—å', state=None)
async def cm_start(message: types.Message):
    if message.from_user.id == ID:
        await FSMAdmin.photo.set()
        await message.reply('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ')


# @dp.message_handler(state='*', comands='–æ—Ç–º–µ–Ω–∞')
# @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        current_state = await state.get_state()
        if current_state is None:
            return
        await redis_db.delit()
        await state.finish()
        await message.reply('OK', reply_markup=admin_keyboard.button_case_admin)


# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ redis
# @dp.message_handler(content_types=['photo'], state=FSMAdmin.photo)
async def load_photo(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        await redis_db.set_photo(message.photo[0].file_id)
        await FSMAdmin.next()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞')


# –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
# @dp.message_handler(state=FSMAdmin.name)
async def load_name(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        await redis_db.set_name(message.text)
        await FSMAdmin.next()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞')


# –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç
# @dp.message_handler(state=FSMAdmin.discription)
async def load_discription(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        await redis_db.set_discription(message.text)
        await FSMAdmin.next()
        await message.reply('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞')


# –ü–æ–ª—É—á–∞–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π –æ—Ç–≤–µ—Ç
# @dp.message_handler(state=FSMAdmin.price)
async def load_price(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        await redis_db.set_price(message.text)
        await FSMAdmin.next()
        await message.reply('–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–º–µ—é—â–µ–≥–æ—Å—è –ø—Ä–æ–¥—É–∫—Ç–∞')

# –ü–æ–ª—É—á–∞–µ–º –ø—è—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–≤–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
async def load_total_product_quantity(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        await redis_db.set_total_quantity(message.text)
        if await redis_db.load() == False:
            await message.answer('–ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
        else:
            await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await redis_db.delit()
        await state.finish()


# –∫—ç–ª–±—ç–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
async def del_callback_run(callbak_query: types.CallbackQuery):
    await baze_bd.sql_delete_command(callbak_query.data.replace('del ', ''))
    await redis_db.del_total_quantity(callbak_query.data.replace('del ', ''))
    #await callbak_query.answer(text=f'{callbak_query.data.replace("del ", "")} —É–¥–∞–ª–µ–Ω–∞.', show_alert=True)
    await bot.answer_callback_query(callbak_query.id, text=f'{callbak_query.data.replace("del ", "")} —É–¥–∞–ª–µ–Ω–∞.')
    await callbak_query.message.delete_reply_markup()


# @dp.message_handler(commands='–£–¥–∞–ª–∏—Ç—å')
async def delete_item(message: types.Message):
    if message.from_user.id == ID:
        read = await baze_bd.sql_read_admin()
        for ret in read:
            await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–°–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞: {ret[2]}\n–¶–µ–Ω–∞: {ret[3]}',
                                 reply_markup=InlineKeyboardMarkup().add(
                                     InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}')))
            '''await bot.send_message(message.from_user.id, text='^^^^',
                                   reply_markup=InlineKeyboardMarkup().add(
                                       InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}')))'''


# —Ñ-—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å
async def to_change(message: types.Message):
    if message.from_user.id == ID:
        await bot.send_message(message.from_user.id, text='–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=admin_keyboard.kb_choice)


#  —Ñ-—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
async def button_back(message: types.Message):
    if message.from_user.id == ID:
        await bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é',
                               reply_markup=admin_keyboard.button_case_admin)
    else:
        await bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é',
                               reply_markup=client_keyboard.client_kbs)


def admin_hendler(dp: Dispatcher):
    dp.register_message_handler(make_chat_commands, commands=['moderator'], is_chat_admin=True)
    dp.register_message_handler(cm_start, (lambda message: message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç'), state=None)
    dp.register_message_handler(cancel_handler, state='*', commands='–æ—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(load_photo, content_types=['photo'], state=FSMAdmin.photo)
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_message_handler(load_discription, state=FSMAdmin.discription)
    dp.register_message_handler(load_price, state=FSMAdmin.price)
    dp.register_message_handler(load_total_product_quantity, state=FSMAdmin.total_quantity)
    dp.register_message_handler(delete_item, (lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å'))
    dp.register_callback_query_handler(del_callback_run, lambda x: x.data and x.data.startswith('del '))
    dp.register_message_handler(to_change, (lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç'))
    dp.register_message_handler(button_back, (lambda message: message.text == '–ù–∞–∑–∞–¥ üîô'))
