from aiogram import types, Dispatcher
from created_bot import dp, bot
from keyboards import client_keyboard
from data_baze import baze_bd, redis_db
from aiogram.dispatcher.filters import Text


# @dp.message_handler(commands=['start', 'help'])  # –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å
async def comands_start_help(message: types.Message):
    try:  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
        await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ',
                               reply_markup=client_keyboard.client_kbs)  # –≤–≤–æ–¥ –∫–ª–∞–≤—ã
        await message.delete()
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É: r\http//t.me/PraynikBot')


# @dp.message_handler(commands=['–†–µ–∂–∏–º_—Ä–∞–±–æ—Ç—ã'])
async def operating_mode(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü–Ω - –ü—Ç —Å 08:00 –¥–æ 17:00')


# @dp.message_handler(commands=['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'])
async def location(message: types.Message):
    # await bot.send_message(message.from_user.id, '—É–ª. –ï—Å–µ–Ω–∏–Ω–∞, 22')
    await message.answer(text='–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ', reply_markup=client_keyboard.client_kbs_inline)


# –≤—ã–¥–∞—ë—Ç –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç—É
async def praynik_menu(message: types.Message):
    await baze_bd.sql_read_client(message, message.from_user.id)
    # await baze_bd.user_exists(message.from_user.id)


# —Ñ-—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ +1, -1, –ü–æ—Ç–≤–µ—Ä–¥–∏—Ç—å
# @dp.callback_query_handler(Text(startswith="num_"))
async def callbacks_num(call: types.CallbackQuery):
    # –†–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º callback –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    action = call.data.split("_")
    id_name = str(action[2]) + '_' + str(action[3])
    user_values = int(await redis_db.get_redis_user_value(id_name))
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä `num_incr` -> `incr`
    if action[1] == "incr":
        user_value = user_values + 1
        await redis_db.redis_user_value(id_name, user_value)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ–ª—å–∫–æ –±–µ—Ä–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –∏ —Å–∫–æ–ª—å–∫–æ –Ω–∞ —Å–∫–ª–∞–¥–µ —Ç–æ–≤–∞—Ä–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
        if int(await redis_db.get_redis_user_value(id_name)) > int(
                await redis_db.get_total_quantity(action[3])):
            await bot.answer_callback_query(call.id, text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç')
            user_value = int(await redis_db.get_total_quantity(action[3]))
            await redis_db.redis_user_value(id_name, user_value)
        else:
            await bot.answer_callback_query(call.id, text=str(await redis_db.get_redis_user_value(id_name)))
    elif action[1] == "decr":
        user_value = user_values - 1
        if int(user_value) == -1:
            user_value = 0
        await redis_db.redis_user_value(id_name, user_value)
        await bot.answer_callback_query(call.id, text=str(await redis_db.get_redis_user_value(id_name)))
    elif action[1] == "finish":
        quantity_of_goods = int(await redis_db.get_redis_user_value(id_name))
        if quantity_of_goods == 0:
            await bot.answer_callback_query(call.id, text='–ù–æ–ª—å —Ç–æ–≤–∞—Ä –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É')
        else:
            user_id = id_name.split('_')[0]
            name_product = id_name.split('_')[1]
            price = float(await baze_bd.price_product(name_product))
            total_product_price = price * quantity_of_goods
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Ç—Å–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
            if await baze_bd.insert_in_basket(user_id, name_product, price, quantity_of_goods,
                                              total_product_price) == False:
                await bot.answer_callback_query(call.id, text="–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            else:
                await bot.answer_callback_query(call.id, text='–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
            await call.message.delete_reply_markup()
        await call.answer()


#  —Ñ-—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω–∞ –∏ –≤—ã–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã, —á—Ç–æ –≤ –Ω–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏ –ø–æ–¥–∏—Ç–æ–≥
async def in_basket(message: types.Message):
    if await baze_bd.user_exists_basket(message.from_user.id) == False:
        await bot.send_message(message.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ')
    else:
        await bot.send_message(message.from_user.id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞', reply_markup=client_keyboard.basket_client)
        await baze_bd.user_basket_select(message, message.from_user.id)
        await bot.send_message(message.from_user.id,
                               text=f'–ü–æ–¥—ã—Ç–æ–≥:  {str(await baze_bd.the_amount_of_payment_for_goods_for_users(message.from_user.id))} —Ä—É–±–ª–µ–π')



# –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω—ã–π —Ç–æ–≤–∞—Ä
async def callbacks_basket_del(call: types.CallbackQuery):
    call_del = call.data.split('_')
    user_id = str(call_del[1])
    name = str(call_del[2])
    await baze_bd.user_basket_del_product(user_id, name)
    await bot.answer_callback_query(call.id, text="–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –í–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã")
    await bot.send_message(call.from_user.id,
        text=f'–ü–æ–¥—ã—Ç–æ–≥: {str(await baze_bd.the_amount_of_payment_for_goods_for_users(call.from_user.id))} —Ä—É–±–ª–µ–π')
    await call.message.delete_reply_markup()
    await call.answer()


def client_handler(dp: Dispatcher):
    dp.register_message_handler(comands_start_help, commands=['start', 'help'])
    dp.register_message_handler(operating_mode, (
        lambda
            message: message.text == '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ‚åö'))  # –≤–≤–µ–ª –ª—è–º–±–¥—É —á—Ç–æ –±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ-—Ü–∏—é –∏ —É–±—Ä–∞—Ç—å –∫–æ—Å—É—é —á–µ—Ä—Ç—É
    dp.register_message_handler(location, (lambda message: message.text == '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ üß≠'))
    dp.register_message_handler(praynik_menu, (lambda message: message.text == '–ú–µ–Ω—é üç™'))
    dp.register_callback_query_handler(callbacks_num, (Text(startswith="num_")))
    dp.register_message_handler(in_basket, (lambda message: message.text == '–ö–æ—Ä–∑–∏–Ω–∞ üõí'))
    dp.register_callback_query_handler(callbacks_basket_del, (Text(startswith="del_")))
